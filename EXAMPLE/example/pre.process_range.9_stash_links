#!/usr/bin/env bash
set -e

source ${STASH_ADMIN_HOME}/common.fun
source ${STASH_ADMIN_HOME}/git.fun
source ${STASH_ADMIN_HOME}/stash.fun

need_env STASH_WWW_BASE_URL
need_env STASH_PROJECT_KEY
need_env STASH_REPO_NAME
need_env STASH_REPO_MAIN_REFS

function process_range() {
    PREV_SHA=${1}
    PREV_SHA_IS_0=$(git_is_delete_commit ${PREV_SHA} && echo true || echo false)
    NEW_SHA=${2}
    NEW_SHA_IS_0=$(git_is_delete_commit ${NEW_SHA} && echo true || echo false)
    REF=${3}
    PUSH_FORCE=$(git merge-base --is-ancestor ${PREV_SHA} ${NEW_SHA} 2>/dev/null && echo false || echo true)
    if [[ ${NEW_SHA_IS_0} = false ]]; then
        if [[ ${PREV_SHA_IS_0} = false && ${PUSH_FORCE} = false ]]; then
            # new commits on an existing ref
            SHAS="$(git rev-list --reverse ${PREV_SHA}..${NEW_SHA})"
        else
            # new ref or push --force
            SHAS="$(git rev-list --reverse $(git for-each-ref --format="%(refname)" ${STASH_REPO_MAIN_REFS} | ${SED} "s/^/^/") ${NEW_SHA})"
        fi
    fi

    # We're only interested in branches
    git_is_branch_ref ${REF} || return 0

    # We're only interested in new commits
    git_is_delete_commit ${NEW_SHA} && return 0

    BRANCH="${REF#refs/heads/}"
    STASH_BRANCH_LINK=$(stash_get_ref_link ${STASH_WWW_BASE_URL} ${STASH_PROJECT_KEY} ${STASH_REPO_NAME} ${REF})

    # We're only printing the links if there were no errors
    [[ -f HAS_ERRORS.${STASH_HOOK_PID} ]] && return 0 || true

    echo
    echo "Browse commits for ${BRANCH}:"
    echo ${STASH_BRANCH_LINK}

    # We're only interested in the namespaced branches
    REFS_GREP=$(echo "refs/heads/[^/]\+/*" | ${SED} "s/ /\\\|/g" | ${SED} "s/\*/.*/g")
    echo ${REF} | ${GREP} -q "^\(${REFS_GREP}\)$" || return 0

    STASH_PARENT_BRANCH_LINK="unknown"
    [[ -z ${STASH_REPO_MAIN_REFS} ]] || {
        STASH_REPO_MAIN_BRANCHES=$(echo ${STASH_REPO_MAIN_REFS} | ${SED} "s/refs\/heads\///g")
        PARENT_BRANCH=$(git_guess_main_branch "${STASH_REPO_MAIN_BRANCHES}" "${NEW_SHA}" | ${HEAD} -1 || true)
        [[ -z ${PARENT_BRANCH} ]] || {
            PARENT_REF="refs/heads/${PARENT_BRANCH}"
            STASH_COMPARE_LINK=$(stash_get_compare_link ${STASH_WWW_BASE_URL} ${STASH_PROJECT_KEY} ${STASH_REPO_NAME} ${REF} ${PARENT_REF})
            echo
            echo "Create pull request for ${BRANCH}:"
            echo "${STASH_COMPARE_LINK}"
        }
    }

    git for-each-ref --format="%(objectname)%09%(refname)%09%(objecttype)" refs/pull-requests/*/from | grep commit | grep "^${PREV_SHA}" | while read line; do
        STASH_PULL_REQUEST_SHA=$(echo "${line}" | cut -f1)
        STASH_PULL_REQUEST_REF=$(echo "${line}" | cut -f2)
        STASH_PULL_REQUEST_ID=$(echo ${STASH_PULL_REQUEST_REF} | ${SED} "s/refs\/pull-requests\///" | ${SED} "s/\/from//")
        STASH_PULL_REQUEST_LINK=$(stash_get_pr_link ${STASH_WWW_BASE_URL} ${STASH_PROJECT_KEY} ${STASH_REPO_NAME} ${STASH_PULL_REQUEST_ID})
        echo
        echo "Already involved in pull request #${STASH_PULL_REQUEST_ID}:"
        echo "${STASH_PULL_REQUEST_LINK}"
    done || true
}

process_range $@
