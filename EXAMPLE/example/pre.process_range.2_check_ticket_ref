#!/usr/bin/env bash
set -e

source ${STASH_ADMIN_HOME}/git.fun

function process_range() {
    PREV_SHA=${1}
    PREV_SHA_IS_0=$(git_is_delete_commit ${PREV_SHA} && echo true || echo false)
    NEW_SHA=${2}
    NEW_SHA_IS_0=$(git_is_delete_commit ${NEW_SHA} && echo true || echo false)
    REF=${3}
    PUSH_FORCE=$(git merge-base --is-ancestor ${PREV_SHA} ${NEW_SHA} 2>/dev/null && echo false || echo true)
    if [[ ${NEW_SHA_IS_0} = false ]]; then
        if [[ ${PREV_SHA_IS_0} = false && ${PUSH_FORCE} = false ]]; then
            # new commits on an existing ref
            SHAS="$(git rev-list --reverse ${PREV_SHA}..${NEW_SHA})"
        else
            # new ref or push --force
            SHAS="$(git rev-list --reverse $(git for-each-ref --format="%(refname)" ${STASH_REPO_MAIN_REFS} | ${SED} "s/^/^/") ${NEW_SHA})"
        fi
    fi

    # We're only interested in branches
    git_is_branch_ref ${REF} || return 0

    # We're only interested in new commits
    git_is_delete_commit ${NEW_SHA} && return 0

    # We're only interested in commits, not setting refs
    [[ -z ${SHAS} ]] && return 0

    # We're only interested in the main branches
    REFS_GREP=$(echo "${STASH_REPO_MAIN_REFS}" | ${SED} "s/ /\\\|/g" | ${SED} "s/\*/.*/g")
    echo ${REF} | ${GREP} -q "^\(${REFS_GREP}\)$" || return 0

    ERRORS=$(mktemp)

    for SHA in ${SHAS}; do
        process_sha ${SHA} ${REF} 2>&1 >> ${ERRORS}
    done

    HAS_ERRORS=false
    [[ -s ${ERRORS} ]] && HAS_ERRORS=true && echo -e "\nCommits with ticket reference errors" && cat ${ERRORS}

    rm -f ${ERRORS}

    ${HAS_ERRORS} && {
        return 1
    } || true
}

function process_sha() {
    SHA=${1}
    REF=${2}

    # Allow commits before a certain date
    COMMIT_DATE=$(git log --format=%ct -1 ${SHA})
    [[ ${COMMIT_DATE} -lt ${STASH_ALLOW_ANYTHING_BEFORE_COMMIT_DATE} ]] && return 0 || true

    # Allow merge commits
    git_is_merge_commit ${SHA} && return 0 || true

    # Allow revert commits
    git_is_revert_commit ${SHA} && return 0 || true

    TICKETS="$(git_get_commit_tickets ${SHA})"

    if [[ -z ${TICKETS} ]]; then
        git_get_commit_message ${SHA} | ${GREP} -q "^\([Nn]o ticket\|[Mm]inor\)" || {
            HAS_ERRORS=true
            echo
            echo -n "${SHA}: "
            git_get_commit_subject ${SHA}
            echo "${SHA}: no ticket reference. Prefix with \"no ticket\" if that is the true intention"
        }
    else
        # TODO check if ticket exists?
        :
    fi
}

process_range $@
